//! SeaORM Entity. Generated by sea-orm-codegen 0.2.3

use datamodels::esi_models::ESIFaction;
use sea_orm::entity::prelude::*;
use sea_orm::Set;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel)]
#[sea_orm(table_name = "factions")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub faction_id: u64,
    pub corporation_id: Option<u64>,
    pub militia_corporation_id: Option<u64>,
    #[sea_orm(column_type = "Text")]
    pub name: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::alliances::Entity")]
    Alliances,
    #[sea_orm(has_many = "super::attackers::Entity")]
    Attackers,
    #[sea_orm(has_many = "super::corporations::Entity")]
    Corporations,
    #[sea_orm(has_many = "super::victims::Entity")]
    Victims,
}

impl Related<super::alliances::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Alliances.def()
    }
}

impl Related<super::attackers::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Attackers.def()
    }
}

impl Related<super::corporations::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Corporations.def()
    }
}

impl Related<super::victims::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Victims.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}

impl From<ESIFaction> for ActiveModel {
    fn from(item: ESIFaction) -> Self {
        Self {
            faction_id: Set(item.faction_id),
            corporation_id: Set(item.corporation_id),
            militia_corporation_id: Set(item.militia_corporation_id),
            name: Set(item.name),
        }
    }
}
