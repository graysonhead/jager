//! SeaORM Entity. Generated by sea-orm-codegen 0.2.3

use datamodels::esi_models::ESIType;
use sea_orm::entity::prelude::*;
use sea_orm::Set;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel)]
#[sea_orm(table_name = "esi_types")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub type_id: u64,
    #[sea_orm(column_type = "Text")]
    pub type_name: String,
    #[sea_orm(column_type = "Text")]
    pub description: String,
    pub mass: Option<f32>,
    pub group_id: u64,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::esi_groups::Entity",
        from = "Column::GroupId",
        to = "super::esi_groups::Column::GroupId",
        on_update = "Restrict",
        on_delete = "Cascade"
    )]
    EsiGroups,
    #[sea_orm(has_many = "super::attackers::Entity")]
    Attackers,
    #[sea_orm(has_many = "super::victims::Entity")]
    Victims,
}

impl Related<super::esi_groups::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::EsiGroups.def()
    }
}

impl Related<super::attackers::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Attackers.def()
    }
}

impl Related<super::victims::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Victims.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}

impl From<ESIType> for ActiveModel {
    fn from(item: ESIType) -> Self {
        crate::entity::esi_types::ActiveModel {
            type_id: Set(item.type_id),
            description: Set(item.description),
            group_id: Set(item.group_id),
            type_name: Set(item.name),
            mass: Set(item.mass),
        }
    }
}
