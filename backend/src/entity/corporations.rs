//! SeaORM Entity. Generated by sea-orm-codegen 0.2.3

use datamodels::esi_models::ESICorporation;
use sea_orm::entity::prelude::*;
use sea_orm::Set;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel)]
#[sea_orm(table_name = "corporations")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub corporation_id: u64,
    pub alliance_id: Option<u64>,
    pub faction_id: Option<u64>,
    pub member_count: Option<u64>,
    #[sea_orm(column_type = "Text")]
    pub name: String,
    #[sea_orm(column_type = "Text")]
    pub ticker: String,
    pub war_eligible: Option<bool>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::alliances::Entity",
        from = "Column::AllianceId",
        to = "super::alliances::Column::AllianceId",
        on_update = "Restrict",
        on_delete = "Restrict"
    )]
    Alliances,
    #[sea_orm(
        belongs_to = "super::factions::Entity",
        from = "Column::FactionId",
        to = "super::factions::Column::FactionId",
        on_update = "Restrict",
        on_delete = "Restrict"
    )]
    Factions,
    #[sea_orm(has_many = "super::attackers::Entity")]
    Attackers,
    #[sea_orm(has_many = "super::victims::Entity")]
    Victims,
}

impl Related<super::alliances::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Alliances.def()
    }
}

impl Related<super::factions::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Factions.def()
    }
}

impl Related<super::attackers::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Attackers.def()
    }
}

impl Related<super::victims::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Victims.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}

impl ActiveModel {
    pub fn from_esi(corporation_id: u64, item: ESICorporation) -> Self {
        Self {
            corporation_id: Set(corporation_id),
            alliance_id: Set(item.alliance_id),
            faction_id: Set(item.faction_id),
            member_count: Set(item.member_count),
            name: Set(item.name),
            ticker: Set(item.ticker),
            war_eligible: Set(item.war_eligible),
        }
    }
}
