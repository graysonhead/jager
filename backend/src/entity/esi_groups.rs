//! SeaORM Entity. Generated by sea-orm-codegen 0.2.3

use datamodels::esi_models::ESIGroup;
use sea_orm::entity::prelude::*;
use sea_orm::Set;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel)]
#[sea_orm(table_name = "esi_groups")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub group_id: u64,
    #[sea_orm(column_type = "Text")]
    pub group_name: String,
    pub category_id: u64,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::esi_categories::Entity",
        from = "Column::CategoryId",
        to = "super::esi_categories::Column::CategoryId",
        on_update = "Restrict",
        on_delete = "Cascade"
    )]
    EsiCategories,
    #[sea_orm(has_many = "super::esi_types::Entity")]
    EsiTypes,
}

impl Related<super::esi_categories::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::EsiCategories.def()
    }
}

impl Related<super::esi_types::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::EsiTypes.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}

impl From<ESIGroup> for ActiveModel {
    fn from(item: ESIGroup) -> Self {
        crate::entity::esi_groups::ActiveModel {
            group_id: Set(item.group_id),
            group_name: Set(item.name),
            category_id: Set(item.category_id),
        }
    }
}
