//! SeaORM Entity. Generated by sea-orm-codegen 0.2.3

use chrono::DateTime as CDateTime;
use chrono::Utc;
use datamodels::esi_models::EsiCharacterPublicInfo;
use sea_orm::entity::prelude::*;
use sea_orm::Set;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel)]
#[sea_orm(table_name = "character_public_info")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub character_id: u64,
    #[sea_orm(column_type = "Text")]
    pub character_name: String,
    pub alliance_id: Option<u64>,
    #[sea_orm(column_type = "Text", nullable)]
    pub birthday: Option<String>,
    pub corporation_id: u64,
    pub faction_id: Option<u64>,
    #[sea_orm(column_type = "Text", nullable)]
    pub last_updated: Option<DateTime>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::attackers::Entity")]
    Attackers,
    #[sea_orm(has_one = "super::victims::Entity")]
    Victims,
}

impl Related<super::attackers::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Attackers.def()
    }
}

impl Related<super::victims::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Victims.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}

impl ActiveModel {
    pub fn from_esi(char_id: u64, char_public_info: &EsiCharacterPublicInfo) -> ActiveModel {
        let birthday: Option<String> = match &char_public_info.birthday {
            Some(bd) => Some(bd.to_string()),
            None => None,
        };
        ActiveModel {
            character_id: Set(char_id),
            alliance_id: Set(char_public_info.alliance_id),
            character_name: Set(char_public_info.name.to_string()),
            birthday: Set(birthday),
            corporation_id: Set(char_public_info.corporation_id),
            faction_id: Set(char_public_info.faction_id),
            last_updated: Set(Some(CDateTime::naive_utc(&Utc::now()))),
        }
    }
}
